{"version":3,"sources":["components/Header/Header.js","components/Day/Day.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","for","id","type","Component","Day","App","Header_Header_Header","Day_Day","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kSAIqBA,0LAEb,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,WAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,SAAOK,IAAI,SAASJ,UAAU,WAA9B,6BACAH,EAAAC,EAAAC,cAAA,SAAOM,GAAG,SAASC,KAAK,aACxBT,EAAAC,EAAAC,cAAA,SAAOK,IAAI,SAASJ,UAAU,OAA9B,yBAbgBO,cCFfC,mLAEb,OACIX,EAAAC,EAAAC,cAAA,2EAHqBQ,aC0BlBE,0LArBX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,cAjBUJ,cCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECXNC,EAAQC,KAAK,CACTC,OAAQ,CACNC,SAAU,CAAC,wBAAyB,aAAc,qBAAsB,iBAI9EC,IAASC,OACRzB,EAAAC,EAAAC,cAACwB,EAAD,MACEC,SAASC,eAAe,SDkHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.171c7240.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <div className=\"logo-wrapper\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <span className=\"logo-title\">obeder</span>\r\n                </div>\r\n                \r\n\r\n                <div className=\"checkbox-toggle\">\r\n                    <label for=\"choice\" className=\"not-eat\">Не ем</label>\r\n                    <input id='choice' type=\"checkbox\" />\r\n                    <label for='choice' className=\"eat\">Ем</label>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Day extends Component {\r\n    render() {\r\n        return (\r\n            <h1>\r\n                Заголовок \r\n            </h1>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from \"../src/components/Header/Header\";\r\nimport Day from \"../src/components/Day/Day\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n        <Day />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n    google: {\n      families: ['Righteous:300,400,700', 'sans-serif', 'Roboto:300,400,700', 'sans-serif']\n    }\n});\n\nReactDOM.render(\n\t<App />, \n  \tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f592a9d4.svg\";"],"sourceRoot":""}